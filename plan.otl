[X] Create 4 EC2 instances on 4 different subnets in different availability zones
[X] Create 4 EC2 instances using nginx on 4 different subnets in different zones
[X] Log into nginx instances
    [X] Enable inbound SSH traffic from your IP address to your instance.
	[X] Ensure that the security group associated with your instance allows incoming SSH traffic from your IP address. The default security group for the VPC does not allow incoming SSH traffic by default. The security group created by the launch instance wizard enables SSH traffic by default. For more information, see Authorize inbound traffic for your Linux instances.
	
[_] Create 4 EC2 instances using nginx 
	[_] Alter the security group rules to only allow A->B, B->C and so forth
	[_] Alter the security group rules to allow A to be accessed locally
[_] Create some python script on each django instance that forwards the request to the next server
[_] Attempt to package all of this using docker

    Another way to troubleshoot is to ssh into the instance and check if nginx service is running “sudo systemctl status nginx”, and check the error logs in “/var/log/nginx/” if they exist

sudo apt update
sudo apt install nginx

I have 2 options:
1)
	Associate elastic IP addresses to each ec2 instance
	Create reverse proxies behind each instance
	Package some sort of docker container that gets installed on each instance, the container to service api requests
	The (from IP address, to IP address) is an argument argument passed to the docker container
OR
2)
	Put each ec2 instance behind an api gateway
	Have the api gateway route to ec2 instances.
	How does it know where to route to?
	It needs a map that says
	A -> B
	B -> C
	C -> D

	Where A, B, C, D are IP addresses?
	We probably need elastic IP addresses here too

Find out if we can ping from one web server to another